import java.util.*;
import java.io.*;

InorderReads(LinkedList l) {

        ArrayList<Optional<String>> reads = new ArrayList<Optional<String>>();

        event begin before (LinkedList l) :
            call(* LinkedList.loadList()) && target(l) {
                System.out.println("List Read Begin");
                }

        event goodread after (LinkedList l, RichFile f)  returning (ListNode n):
            call(ListNode LinkedList.readNode(RichFile) throws Throwable+)
            && this(l)
            && args(f) {
                reads.add(Optional.of(f.filepath));
                System.out.println("[RUNTIME-INFO] Read - " + n.contents + " from file " + f.filepath );
            }

       event badread after (LinkedList l, RichFile f) throwing (Throwable e) :
           call(ListNode LinkedList.readNode(RichFile) throws Throwable+)
           && this(l)
           && args(f) {
               if(e instanceof IOException) {
                   reads.add(Optional.empty());
                   System.out.println("[RUNTIME INFO] Ignored - " + f.filepath);
               }
           }


        event end after(LinkedList l) :
            call(* LinkedList.loadList()) && this(l) {

                if(reads.size() > l.fileIndexList.size()){
                    System.err.println("[RUNTIME WARNING] Extra Read Calls");
                }
                else if(reads.size() < l.fileIndexList.size()) {
                    System.err.println("[RUNTIME WARNING] Arbitrary Drops (Other than IOException)");
                }
                else {
                    for(int i = 0; i < reads.size(); ++i) {
                        Optional<String> read = reads.get(i);
                        if(read.isPresent() && !(read.get().equals(l.fileIndexList.get(i).filepath))) {
                            System.err.println(
                                "[RUNTIME WARNING] " + read.get() + " read out of order"
                            );
                            System.err.println(
                                "[RUNTIME WARNING] " + l.fileIndexList.get(i).filepath + " was expected"
                            );
                        }
                    }
                }
            }

	ere : begin (goodread | badread)* end

	@fail {
	  System.err.println(
            "[RUNTIME WARNING] Did Not Read Entire Index List"
          );
	}
}
